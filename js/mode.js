// mode.js - Solution robuste et compl√®te
const toggleBtn = document.getElementById('theme-toggle');
const root = document.documentElement;

// Fonction pour appliquer le th√®me de mani√®re forc√©e
function applyTheme(isDark) {
  if (isDark) {
    root.classList.remove('light-mode');
    toggleBtn.textContent = 'üåô';
    // Force le mode sombre m√™me si les pr√©f√©rences syst√®me sont diff√©rentes
    root.style.colorScheme = 'dark';
  } else {
    root.classList.add('light-mode');
    toggleBtn.textContent = '‚òÄÔ∏è';
    root.style.colorScheme = 'light';
  }
}

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
  // R√©cup√©rer le th√®me sauvegard√©
  const savedTheme = localStorage.getItem('theme');
  
  // Logique claire : d√©faut sombre, ou th√®me sauvegard√©
  if (savedTheme === 'light') {
    applyTheme(false); // Mode clair
  } else {
    applyTheme(true);  // Mode sombre (d√©faut)
    // S'assurer que localStorage refl√®te le d√©faut
    if (!savedTheme) {
      localStorage.setItem('theme', 'dark');
    }
  }
});

// Gestionnaire de clic pour le bouton
toggleBtn?.addEventListener('click', () => {
  const isCurrentlyDark = !root.classList.contains('light-mode');
  const newTheme = isCurrentlyDark ? 'light' : 'dark';
  
  // Appliquer le nouveau th√®me
  applyTheme(newTheme === 'dark');
  
  // Sauvegarder dans localStorage
  localStorage.setItem('theme', newTheme);
  
  // Debug pour v√©rifier
  console.log('Th√®me chang√© vers:', newTheme);
  console.log('Classe light-mode pr√©sente:', root.classList.contains('light-mode'));
});